#ifndef PARSER_INPUT_H
#define PARSER_INPUT_H

#include "parser/InputLocation.h"

#include <cassert>
#include <ostream>
#include <string>

/**
 * @class Input
 * 
 * Abstract class for getting text input.
 * 
 * @author Felipe Borges Alves
 */
class Input {
	public:
		/**
		 * Construct an Input with a specific name.
		 * 
		 * @param name The name of the input, this name will be used in error
		 * messages generated by the Scanner or the Parser.
		 */
		Input(const std::string & name);
		
		/**
		 * Construct an Input with the default name.
		 */
		Input();
		virtual ~Input();
		
		/**
		 * @return The next character in the input.
		 * 
		 * @TODO This method is slow, it must be optimized.
		 */
		inline char nextChar() {
			char c = readChar();
			
			if (c == '\n') {
				++inputLine;
				lastLinePos = inputPos;
			}
			
			return c;
		}
		
		/**
		 * @return The input name and position of the input.
		 * 
		 * @see InputLocation
		 */
		virtual InputLocation getCurrentLocation() const;
		
		/**
		 * Reset the input position.
		 */
		virtual void resetInput();
		
		/**
		 * Mark the current position of the input,
		 * so the next rollback will be relative to this position.
		 */
		virtual void markPosition();
		
		/**
		 * Rollback the input, adding some characters that were read back to
		 * be read again.
		 * The rollback is relative to the last marked position.
		 * 
		 * @param How many chars were used after the mark
		 */
		virtual void rollback(unsigned int usedChars);
		
		/**
		 * @return The input name.
		 */
		virtual const std::string & getInputName() const;
		
		/**
		 * Change the input name.
		 * 
		 * @param name The new name of this input.
		 */
		virtual void setInputName(const std::string & name);
		
		/**
		 * @return The current line number of this input.
		 */
		virtual unsigned int getInputLine() const;
		
		/**
		 * @return The current position of this input.
		 */
		virtual unsigned int getInputPos() const;
		
		/**
		 * @return The current line of this input.
		 */
		virtual std::string getCurrentLine();
		
		/**
		 * @return The current column in the current line of this input.
		 */
		virtual unsigned int getCurrentLinePos() const;
		
		/**
		 * Dump this input, from the current position to the input's end, to the stream.
		 * After this method the input position will be at the end of the input.
		 * 
		 * @param stream The stream where this Input will be dumped to.
		 */
		void dumpInput(std::ostream & stream);
		
		/**
		 * Check if this input is in a consistent state.
		 * The checks are enabled only when compiled without NDEBUG.
		 */
		virtual void sanityCheck() const;
		
		/**
		 * Change the current position of this Input.
		 * 
		 * @param pos The new position.
		 */
		virtual void setInputPos(unsigned int pos) = 0;
		
	protected:
		virtual char readChar() = 0;
		
		std::string inputName;
		
		// the position of the input
		unsigned int inputPos;
		unsigned int inputLine;
		unsigned int lastLinePos;
		
		unsigned int markedPos;
		unsigned int markedLine;
		unsigned int markedLastLinePos;
};

#endif
